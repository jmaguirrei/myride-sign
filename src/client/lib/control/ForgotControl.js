/* ------------------------------------------------------------------------------------------------===== FORGOT WORFLOW =====0: EMAIL (prepopulate with signin.email)    isRegistered ?    - false: error    - true: continue1: PASSWORD (new)    sendEmail (forgotToken)3: TOKEN    - ko: error    - ok: setPassword => Dashboard!-------------------------------------------------------------------------------------------------*/export const ForgotControl = store => {  const language = store.get('language');  const currentStep = store.get('forgot.currentStep');  if (currentStep === 0) {    // Define new password account    const emailCheck = store.check('email', store.get('forgot.email'));    const passwordCheck = store.check('password', store.get('forgot.password'));    if (emailCheck.result && passwordCheck.result) {      store.call('forgotEmailPassword');    } else {      const checkText = !emailCheck.result        ? store.utils.get(emailCheck, `message.${language}`, '')        : store.utils.get(passwordCheck, `message.${language}`, '');      store.addAlert({ message: checkText, timeout: 5000 });    }  } else if (currentStep === 1) {    // Validate Token    const tokenCheck = store.check('name', store.get('forgot.tokenDigits'));    if (tokenCheck.result) {      store.call('forgotToken');    } else {      const checkText = store.utils.get(tokenCheck, `message.${language}`, '');      store.addAlert({ message: checkText, timeout: 5000 });    }  } else {    store.route('signin');    store.set({ currentPage: 'signin' });    // Wait 2 secs before changing this state    store.set({ 'forgot.currentStep': 0 }, { timeout: 2000 });  }};