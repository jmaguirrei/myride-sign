export default (client, id) => {  return client.hoc({    id,    classes: {      input: `        font-size: 16px;        border: 1px solid hsl(0, 0%, 94%);        outline: none;        padding: 15px 18px;        background: hsl(0, 0%, 97%);        border-radius: 5px;        width: 100%;      `,    },    mounted(props) {      if (props.autoFocus) {        const node = document.getElementById(props.id);        if (node) node.focus();      }    },    actions(props) {      return {        onkeydown: e => {          // Tab pressed          if (e.keyCode === 9 && props.useTabAsEnter) {            e.preventDefault();            props.onEnterPressed();          }        },        onpaste: e => {          if (props.onTextChanged) {            // onTextChanged expects an e.target.value object...            const value = e.clipboardData.getData('text/plain');            props.onTextChanged({ target: { value }});          }        },      };    },    render({ props, classes, actions }) {      const {        type = 'text',        placeholder = '',        value,        inStyle = '',        onTextChanged,        autocomplete,      } = props;      // ariaLabel={label}      return (        <input {...{          id: props.id,          type,          placeholder,          value,          autocomplete,          class: classes.input,          style: inStyle,          onkeyup: onTextChanged,          onkeydown: actions.onkeydown,          onpaste: actions.onpaste,        }}/>      );    }  });};