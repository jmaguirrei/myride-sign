export default (client, id) => {  const { ForgotControl } = client.lib;  return client.hoc({    id,    state(props, store) {      return {        buttonPressed: store.get('forgot.buttonPressed'),        currentStep: store.get('forgot.currentStep'),      };    },    actions(props, store) {      return {        onclick: () => {          ForgotControl(store);        },      };    },    styles: {      button: (pressed, currentStep) => `        opacity: ${pressed ? 0.5 : 1};        width: ${currentStep >= 1 ? 70 : 98}%;      `,    },    classes: {      wrapper: `        padding: 20px 10px;        display: flex;        justify-content: center;      `,      button: `        border-radius: 7px;        color: white;        text-align: center;        font-size: 18px;        padding: 10px;        background: ${client.lib.Colors.GREEN_SIGNUP};        cursor: pointer;      `,    },    render({ classes, state, actions, styles, utils }) {      const { currentStep, buttonPressed } = state;      return (        <div class={classes.wrapper}>          <div            class={classes.button}            style={styles.button(buttonPressed, currentStep)}            onclick={actions.onclick}          >            {              ({                0: utils.localize({ en: 'Save new password', es: 'Guardar nueva contrase√±a' }),                1: utils.localize({ en: 'Validate Token', es: 'Validar Token' }),                2: utils.localize({ en: 'Login', es: 'Entrar' }),              })[currentStep]            }          </div>        </div>      );    }  });};